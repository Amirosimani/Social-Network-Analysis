DataFrame$tools = gsub("\\(formerly docs\\)", "", DataFrame$tools)
DataFrame$tools =  gsub("\\(grep\\)", "", gsub("\\(terminal \\/ command line\\)","", DataFrame$tools))
#splitting programs into a list
tools <- strsplit(as.character(DataFrame$tools),',')
setDT(DataFrame)[, paste0("tools", 1:16) := tstrsplit(tools, ",")]   #Add seperate column for each program
degreeFactors <- DataFrame[,.N,by= degree]
degreeFactors$N[1] <- degreeFactors$N[1] + degreeFactors$N[6] + degreeFactors$N[8] + degreeFactors$N[12]
degreeFactors <- degreeFactors[-c(6, 8, 12), ]
degreeFactors <- degreeFactors[order(-N),]
View(degreeFactors)
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
waitlistGraph <- ggplot(DataFrame, aes(factor(DataFrame$waitlist), fill = factor(DataFrame$waitlist), label = l)) + geom_bar(width=.5) +
labs(title = "Enrollement Status", x = "Waitlist", y = "Number of students")
#degrees graph
degreeGraph <- ggplot(degreeFactors, aes(x = factor(degree), y = N)) + geom_bar(stat = "identity") +
labs(title = "Programs", x = "Name of program", y = "Number of students")
multiplot(C,degreeGraph, cols=2)
ggplot(DataFrame, aes(factor(DataFrame$waitlist), fill = factor(DataFrame$waitlist), label = l)) + geom_bar(width=.5) +
labs(title = "Enrollement Status", x = "Waitlist", y = "Number of students")
ggplot(DataFrame, aes(factor(DataFrame$waitlist), fill = factor(DataFrame$waitlist)) + geom_bar(width=.5) +
labs(title = "Enrollement Status", x = "Waitlist", y = "Number of students")
ggplot(DataFrame, aes(factor(DataFrame$waitlist), fill = factor(DataFrame$waitlist)) + geom_bar(width=.5) +
labs(title = "Enrollement Status", x = "Waitlist", y = "Number of students")
#degrees graph
waitlistGraph <- ggplot(DataFrame, aes(factor(DataFrame$waitlist), fill = factor(DataFrame$waitlist)) + geom_bar(width=.5) +
labs(title = "Enrollement Status", x = "Waitlist", y = "Number of students")
waitlistGraph <- ggplot(DataFrame, aes(factor(DataFrame$waitlist), fill = factor(DataFrame$waitlist))) + geom_bar(width=.5) +
labs(title = "Enrollement Status", x = "Waitlist", y = "Number of students")
ggplot(DataFrame, aes(factor(DataFrame$waitlist), fill = factor(DataFrame$waitlist))) + geom_bar(width=.5) +
labs(title = "Enrollement Status", x = "Waitlist", y = "Number of students")
waitlistGraph <- ggplot(DataFrame, aes(factor(DataFrame$waitlist), fill = factor(DataFrame$waitlist))) + geom_bar(width=.5) +
labs(title = "Enrollement Status", x = "Waitlist", y = "Number of students")
#degrees graph
degreeGraph <- ggplot(degreeFactors, aes(x = factor(degree), y = N)) + geom_bar(stat = "identity") +
labs(title = "Programs", x = "Name of program", y = "Number of students")
multiplot(C,degreeGraph, cols=2)
waitlistGraph <- ggplot(DataFrame, aes(factor(DataFrame$waitlist), fill = factor(DataFrame$waitlist))) + geom_bar(width=.5) +
labs(title = "Enrollement Status", x = "Waitlist", y = "Number of students")
#degrees graph
degreeGraph <- ggplot(degreeFactors, aes(x = factor(degree), y = N)) + geom_bar(stat = "identity") +
labs(title = "Programs", x = "Name of program", y = "Number of students")
multiplot(waitlistGraph, degreeGraph, cols=2)
ggplot(DataFrame, aes(x= factor(degree), y = reorder(N, -table(N)[N]) + geom_bar()
ggplot(DataFrame, aes(x= factor(degree), y = reorder(N, -table(N)[N]) + geom_bar()))
degreeGraph <- ggplot(degreeFactors, aes(x = factor(degree), y = N)) + geom_bar(stat = "identity") +
labs(title = "Programs", x = "Name of program", y = "Number of students")
multiplot(waitlistGraph, degreeGraph, cols=2)
summary(degreeGraph)
degreeFactors
degreeGraph <- ggplot(degreeFactors, aes(x = factor(degree), y = N)) + geom_bar(stat = "identity")
ggplot(degreeFactors, aes(x = factor(degree), y = N)) + geom_bar(stat = "identity") +
labs(title = "Programs", x = "Name of program", y = "Number of students")
ggplot(degreeFactors, aes(x = reorder(factor(degree), desc(N)), y = N)) + geom_bar(stat = "identity") +
labs(title = "Programs", x = "Name of program", y = "Number of students")
c <- factor(degreeFactors$degree)
c
ggplot(degreeFactors, aes(x = reorder(c, desc(N)), y = N)) + geom_bar(stat = "identity") +
labs(title = "Programs", x = "Name of program", y = "Number of students")
a <- data.frame(degreeFactors)
View(a)
View(degreeFactors)
p2 <- ggplot(a, aes(x = reorder(degree, -N), y = N)) +
geom_bar(stat = "identity")
multiplot(waitlistGraph, p2, cols=2)
degreeFactors <- data.frame(degreeFactors[-c(6, 8, 12), ])
degreeFactors <- degreeFactors[-c(6, 8, 12), ]
degreeFactors <- data.frame(degreeFactors)
degreeGraph <- ggplot(a, aes(x = reorder(degree, -N), y = N)) + geom_bar(stat = "identity") +
labs(title = "Programs", x = "Name of program", y = "Number of students")
multiplot(waitlistGraph, p2, cols=2)
View(DataFrame)
View(degreeFactors)
degreeGraph <- ggplot(a, aes(x = reorder(degree, -N), y = N), fill = factor(degree)) + geom_bar(stat = "identity") +
labs(title = "Programs", x = "Name of program", y = "Number of students")
multiplot(waitlistGraph, p2, cols=2)
degreeGraph <- ggplot(a, aes(x = reorder(degree, -N), y = N), fill = degree) + geom_bar(stat = "identity") +
labs(title = "Programs", x = "Name of program", y = "Number of students")
multiplot(waitlistGraph, p2, cols=2)
degreeGraph <- ggplot(a, aes(x = reorder(degree, -N), y = N)) +
geom_bar(stat = "identity", aes(fill = factor(degree)),colour = "white",position = 'dodge')) +
labs(title = "Programs", x = "Name of program", y = "Number of students")
degreeGraph <- ggplot(a, aes(x = reorder(degree, -N), y = N)) +
geom_bar(stat = "identity", aes(fill = factor(degree)),colour = "white",position = 'dodge')) +
degreeGraph <- ggplot(a, aes(x = reorder(degree, -N), y = N)) +
geom_bar(stat = "identity", aes(fill = degree, colour = "white",position = 'dodge')) +
labs(title = "Programs", x = "Name of program", y = "Number of students")
multiplot(waitlistGraph, p2, cols=2)
geom_bar(stat = "identity", aes(fill = factor(degree), colour = "white",position = 'dodge')) +
degreeGraph <- ggplot(a, aes(x = reorder(degree, -N), y = N)) +
geom_bar(stat = "identity", aes(fill = factor(degree), colour = "white",position = 'dodge')) +
labs(title = "Programs", x = "Name of program", y = "Number of students")
degreeGraph <- ggplot(a, aes(x = reorder(degree, -N), y = N)) +
geom_bar(stat = "identity") +
labs(title = "Programs", x = "Name of program", y = "Number of students")
multiplot(waitlistGraph, p2, cols=2)
View(a)
View(degreeFactors)
degreeFactors <- DataFrame[,.N,by= degree]
degreeFactors$N[1] <- degreeFactors$N[1] + degreeFactors$N[6] + degreeFactors$N[8] + degreeFactors$N[12]
degreeFactors <- degreeFactors[-c(6, 8, 12), ]
degreeFactors <- data.frame(degreeFactors)
degreeGraph <- ggplot(degreeFactors, aes(x = reorder(degree, -N), y = N)) +
geom_bar(stat = "identity") +
labs(title = "Programs", x = "Name of program", y = "Number of students")
multiplot(waitlistGraph, p2, cols=2)
a <- data.table(Familiarity=rep(c("a little", "confident", "expert", "none")))
View(a)
a <- data.frame(Familiarity=rep(c("a little", "confident", "expert", "none")))
View(a)
j <- 1
for (i in c("R_DataManipulation","R_Graphics","R_MultiVariate","Markdown","Matlab_DataManipulation","GitHub"))
{
print(i)
print(j)
b <- count(DataFrame, i)
print(b)
aaa = data.frame(b)
j <- j +1
}
for (i in c("R_DataManipulation","R_Graphics","R_MultiVariate","Markdown","Matlab_DataManipulation","GitHub"))
{
print(i)
print(j)
a <- cbind(count(DataFrame, i))
a <- cbind(count(DataFrame, i))
j <- j +1
}
b <- count(DataFrame, i)
library(RCurl)   #to read CSV
library(data.table)  #Data table manipulation
library(ggplot2)
library(grid)
count(DataFrame, i)
?count
count(DataFrame, i)
for (i in c("R_DataManipulation","R_Graphics","R_MultiVariate","Markdown","Matlab_DataManipulation","GitHub"))
{
print(i)
print(j)
DataFrame[i]
j <- j +1
}
for (i in c("R_DataManipulation","R_Graphics","R_MultiVariate","Markdown","Matlab_DataManipulation","GitHub"))
{
print(i)
print(j)
DataFrame(i)
j <- j +1
}
DataFrame$i
DataFrame$i
i
library(grid)
DataFrame
a <- data.table(Familiarity=rep(c("a little", "confident", "expert", "none")))
View(a)
j <- 1
for (i in c("R_DataManipulation","R_Graphics","R_MultiVariate","Markdown","Matlab_DataManipulation","GitHub"))
{
print(i)
print(j)
b <- count(DataFrame, i)
print(b)
aaa = data.frame(b)
j <- j +1
}
for (i in c("R_DataManipulation","R_Graphics","R_MultiVariate","Markdown","Matlab_DataManipulation","GitHub"))
{
print(i)
print(j)
j <- j +1
}
library(data.table)  #Data table manipulation
library(ggplot2)
library(grid)
# Read  file from GitHub repo
library(RCurl)
library(data.table)
library(ggplot2)
library(grid)
# Read  file from GitHub repo
count()
DataFrame[, count := length(unique(GitHub))]
View(DataFrame)
# Installing all the required packages
needed.libraries <- c("RCurl", "data.table", "ggplot2", "grid")
install.packages(needed.libraries, dependencies = TRUE)
install.packages(needed.libraries, dependencies = TRUE)
library(RCurl)
library(data.table)
library(ggplot2)
library(grid)
# Read  file from GitHub repo
CSV_url <- getURL("https://raw.githubusercontent.com/Amirosimani/ExploratoryDataAnalysis/master/Survey.csv")
DataFrame <- read.csv(text = CSV_url)
## Tidying the data frame
DataFrame <- Filter(function(x)!all(is.na(x)), DataFrame) #Delete empty columns
colnames(DataFrame) <- c("waitlist","degree","tools",
"R_DataManipulation", "pronoun","editor","R_Graphics",
"R_MultiVariate","Markdown","Matlab_DataManipulation","GitHub") #Rename columns name
# cleaning up text
DataFrame$tools = gsub("\\(formerly docs\\)", "", DataFrame$tools)
DataFrame$tools =  gsub("\\(grep\\)", "", gsub("\\(terminal \\/ command line\\)","", DataFrame$tools))
#splitting programs into a list
tools <- strsplit(as.character(DataFrame$tools),',')
setDT(DataFrame)[, paste0("tools", 1:16) := tstrsplit(tools, ",")]   #Add seperate column for each program
# Converting columns to factor
"col_names <- names(DataFrame)
DataFrame[,col_names] <- lapply(DataFrame[,col_names] , factor)"
#removing non-unique degree values
degreeFactors <- DataFrame[,.N,by= degree]
degreeFactors$N[1] <- degreeFactors$N[1] + degreeFactors$N[6] + degreeFactors$N[8] + degreeFactors$N[12]
degreeFactors <- degreeFactors[-c(6, 8, 12), ]
degreeFactors <- data.frame(degreeFactors)
# Multiple plot function
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
#to do: data label on bars
#waitlist graph
waitlistGraph <- ggplot(DataFrame, aes(factor(DataFrame$waitlist), fill = factor(DataFrame$waitlist))) + geom_bar(width=.5) +
labs(title = "Enrollement Status", x = "Waitlist", y = "Number of students")
#degrees graph
degreeGraph <- ggplot(degree, aes(x = reorder(degree, -N), y = N)) +
geom_bar(stat = "identity") +
labs(title = "Programs", x = "Name of program", y = "Number of students")
multiplot(waitlistGraph, p2, cols=2)
#R Data manipulation graph
#R Data manipulation graph
dataManiGraph <- ggplot(DataFrame, aes(factor(DataFrame$R_DataManipulation))) + geom_bar(width=.5) +
labs(title = "Data Manipulation with R", x = "Confidence Level", y = "Number of students")
#R Graphics
RGraphicsGraph <- ggplot(DataFrame, aes(factor(DataFrame$R_Graphics))) + geom_bar(width=.5) +
labs(title = "Basic Graphics with R", x = "Confidence Level", y = "Number of students")
#R Advanced amd  visualization
RAdvancedGraph <- ggplot(DataFrame, aes(factor(DataFrame$R_MultiVariate))) + geom_bar(width=.5) +
labs(title = "Advanced Analysis and Visualization with R", x = "Confidence Level", y = "Number of students")
#R Markdown
RMDGraph <- ggplot(DataFrame, aes(factor(DataFrame$Markdown))) + geom_bar(width=.5) +
labs(title ="R Markdown", x = "Confidence Level", y = "Number of students")
#Matlab Data Manipulation
MatlabGraph <- ggplot(DataFrame, aes(factor(DataFrame$Matlab_DataManipulation))) + geom_bar(width=.5) +
labs(title = "Data Manipulation wiht Matlab", x = "Confidence Level", y = "Number of students")
#GitHub
GitHubGraph <- ggplot(DataFrame, aes(factor(DataFrame$GitHub))) + geom_bar(width=.5) +
labs(title = "GitHub", x = "Confidence Level", y = "Number of students")
multiplot(dataManiGraph,RGraphicsGraph, RAdvancedGraph, RMDGraph, MatlabGraph, GitHubGraph, cols=3)
#to do: show all the confidence levels in one chart
"
a <- data.table(Familiarity=rep(c("a little", "confident", "expert", "none")))
j <- 1
for (i in c("R_DataManipulation","R_Graphics","R_MultiVariate","Markdown","Matlab_DataManipulation","GitHub"))
{
print(i)
count()
View(degreeFactors)
waitlistGraph <- ggplot(DataFrame, aes(factor(DataFrame$waitlist), fill = factor(DataFrame$waitlist))) + geom_bar(width=.5) +
labs(title = "Enrollement Status", x = "Waitlist", y = "Number of students")
#degrees graph
degreeGraph <- ggplot(degree, aes(x = reorder(degree, -N), y = N)) +
geom_bar(stat = "identity") +
labs(title = "Programs", x = "Name of program", y = "Number of students")
waitlistGraph <- ggplot(DataFrame, aes(factor(DataFrame$waitlist), fill = factor(DataFrame$waitlist))) + geom_bar(width=.5) +
labs(title = "Enrollement Status", x = "Waitlist", y = "Number of students")
multiplot(waitlistGraph, degreeGraph, cols=2)
degreeGraph <- ggplot(degree, aes(x = reorder(degree, -N), y = N)) +
geom_bar(stat = "identity") +
labs(title = "Programs", x = "Name of program", y = "Number of students")
degreeGraph <- ggplot(degreeFactors, aes(x = reorder(degree, -N), y = N)) +
geom_bar(stat = "identity") +
labs(title = "Programs", x = "Name of program", y = "Number of students")
multiplot(waitlistGraph, degreeGraph, cols=2)
View(DataFrame)
table(unique(DataFrame[c("R_DataManipulation","R_Graphics")]))
table(unique(DataFrame[c("R_DataManipulation","R_Graphics")])$degree)
unique(DataFrame[c("R_DataManipulation","R_Graphics")])
unique(DataFrame$GitHub)
library(dplyr)
count()
count(DataFrame)
count(DataFrame$Github)
count(DataFrame, vars = GitHub )
count(DataFrame, vars =  c("R_DataManipulation","R_Graphics") )
count(DataFrame, vars =  R_DataManipulation)
j <- 1
for (i in c("R_DataManipulation","R_Graphics","R_MultiVariate","Markdown","Matlab_DataManipulation","GitHub"))
{
print(i)
print(j)
count(DataFrame, vars =  i)
j <- j +1
}
i
count(DataFrame, vars =  i)
count(DataFrame, vars =  GitHub)
count(DataFrame, vars =  'i')
count(DataFrame, vars =  "i")
count(DataFrame, vars =  DataFrame[i])
DataFrame[i]
DataFrame['i']
c1 <- count(DataFrame, vars = R_DataManipulation )
View(`c1`)
colnames(c1) <- "R_DataManipulation"
View(`c1`)
colnames(c1) <- c(1,"R_DataManipulation")
View(`c1`)
c2 <- count(DataFrame, vars = R_Graphics )
colnames(c2) <- c(1,"R_Graphics")
c3 <- count(DataFrame, vars = R_MultiVariate )
colnames(c1) <- c(1,"R_MultiVariate")
c4 <- count(DataFrame, vars = Markdown )
colnames(c1) <- c(1,"Markdown")
c5 <- count(DataFrame, vars = Matlab_DataManipulation )
colnames(c1) <- c(1,"Matlab_DataManipulation")
c6 <- count(DataFrame, vars = GitHub )
colnames(c1) <- c(1,"GitHub")
View(`c2`)
View(`c2`)
View(`c3`)
View(`c2`)
View(`c1`)
View(`c2`)
View(`c3`)
View(`c4`)
View(`c6`)
View(`c5`)
View(`c6`)
expertise <- rbind(c1, c2, c3, c4, c5, c6)
expertise <- rbind(c1, c2)
expertise <- merge(c1, c2)
Reduce(function(x, y) merge(x, y, all=TRUE), list(c1, c2, c3))
newResults <- merge(x = c1, y = c2, by = "1", all.x = TRUE)
View(newResults)
newResults <- merge(x = c'i', y = c2, by = "1", all.x = TRUE)
newResults <- merge(x = ci, y = c2, by = "1", all.x = TRUE)
newResults <- merge(x = c1, y = c2, by = "1", all.x = TRUE)
new = merge(c2, c3)
newResults <- merge(x = c1, y = c("c2", "c3"), by = "1", all.x = TRUE)
Reduce(merge,list(c1,c2,c3))
Reduce(merge,list(c1,c2,c3), by = 1)
Reduce(merge,list(c1,c2,c3), all.x = TRUE)
Reduce(merge,list(c1,c2,c3), by = "1")
cbind(c1, c2)
cbind(c1[2], c2)
cbind(c1, c2)
cbind(c1, c2, c3, c4 ,c5, c6)
c3
c1 <- count(DataFrame, vars = R_DataManipulation )
colnames(c1) <- c(1,"R_DataManipulation")
c2 <- count(DataFrame, vars = R_Graphics )
colnames(c2) <- c(1,"R_Graphics")
c3 <- count(DataFrame, vars = R_MultiVariate )
colnames(c3) <- c(1,"R_MultiVariate")
c4 <- count(DataFrame, vars = Markdown )
colnames(c4) <- c(1,"Markdown")
c5 <- count(DataFrame, vars = Matlab_DataManipulation )
colnames(c5) <- c(1,"Matlab_DataManipulation")
c6 <- count(DataFrame, vars = GitHub )
colnames(c6) <- c(1,"GitHub")
Reduce(merge,list(c1,c2,c3), by = "1")
expertise <- cbind(c1, c2, c3, c4, c5, c 6)
expertise <- cbind(c1, c2, c3, c4, c5, c6)
View(expertise)
expertise <- expertise[-c(3,5,7,9,11),]
expertise <- expertise[-c(3,5,7,9),]
expertise <- expertise[,-c(3,5,7,9)]
expertise <- cbind(c1, c2, c3, c4, c5, c6)
View(expertise)
expertise[ ,c("1") := NULL]
View(expertise)
expertise[ ,c(,"1","1") := NULL]
expertise[ ,c("1","1") := NULL]
expertise[ ,c("1") := NULL]
View(expertise)
expertise <- cbind(c1, c2, c3, c4, c5, c6)
colnames(c1) <- c(1,"R_DataManipulation")
c2 <- count(DataFrame, vars = R_Graphics )
colnames(c2) <- c(2,"R_Graphics")
c3 <- count(DataFrame, vars = R_MultiVariate )
colnames(c3) <- c(3,"R_MultiVariate")
c4 <- count(DataFrame, vars = Markdown )
colnames(c4) <- c(4,"Markdown")
c5 <- count(DataFrame, vars = Matlab_DataManipulation )
colnames(c5) <- c(5,"Matlab_DataManipulation")
c6 <- count(DataFrame, vars = GitHub )
colnames(c6) <- c(6,"GitHub")
expertise <- cbind(c1, c2, c3, c4, c5, c6)
View(expertise)
drops <- c("1","2","3","4","5","6")
expertise[,!(names(DF) %in% drops)]
expertise[,!(names(expertise) %in% drops)]
View(expertise)
drops <- c("1","2","3","4","5","6")
expertise[,!(names(expertise) %in% drops)]
View(expertise)
expertise[,drops,drop=T]
View(expertise)
expertise[drops,drop=T]
experties <- expertise[,drops,drop=T]
View(expertise)
expertise <- cbind(c1, c2, c3, c4, c5, c6)
experties <- subset(experties, select = -c("1","2","3","4","5","6") )
expertise[, !(colnames(expertise) %in% c("1","2","3","4","5","6"))]
View(expertise)
expertise[,c('1', '2') := NULL]
View(expertise)
expertise <- cbind(c1, c2, c3, c4, c5, c6)
expertise[,c('1', '2', '3', '4', '5', '6') := NULL]
View(expertise)
expertise[,c('2', '3', '4', '5', '6') := NULL]
expertise <- cbind(c1, c2, c3, c4, c5, c6)
expertise[,c('2', '3', '4', '5', '6') := NULL]
View(expertise)
colnames(c1) <- c("Level","R_DataManipulation")
expertise <- cbind(c1, c2, c3, c4, c5, c6)
expertise[,c('2', '3', '4', '5', '6') := NULL]
View(expertise)
g1<-ggplot(ag.mtc, aes(x = factor(gear), y = meanwt, fill=factor(vs),color=factor(vs))) +
geom_bar(stat = "identity", position=position_dodge()) +
geom_text(aes(y=meanwt, ymax=meanwt, label=meanwt),position= position_dodge(width=0.9), vjust=-.5)
View(expertise)
g1<-ggplot(experties, aes(x = factor(GitHub), y = Level)) +
geom_bar(stat = "identity", position=position_dodge()) +
g1<-ggplot(experties, aes(x = factor(GitHub), y = Level)) +
geom_bar(stat = "identity", position=position_dodge())
View(DataFrame)
setwd("~/")
setwd("~/GitHub/Social Network Analysis")
gss = read.csv(file.choose(gss-nets.csv)) ## choose the GSS Networks csv.file from Courseworks ##
gss = read.csv(file.choose("gss-nets.csv")) ## choose the GSS Networks csv.file from Courseworks ##
gss = read.csv(file.choose("gss-nets.csv")) ## choose the GSS Networks csv.file from Courseworks ##
View(gss)
gss$rlife = 4-gss$life
View(gss)
table(gss$rlife)
educs = c("educ1", "educ2", "educ3", "educ4", "educ5")
gss$aveeduc=rowMeans(gss[, educs ], na.rm=TRUE)
summary(gss$aveeduc)
edycs
educs
summary(educs)
reg1 <- lm(rlife ~ aveeduc, data=gss)
plot(gss$aveeduc, gss$rlife)
abline(reg1)
summary(lm(rlife ~ aveeduc + numgiven, data=gss))
summary(lm(rlife ~ aveduc + educ + numgiven, data=gss))
summary(lm(rlife ~ aveeduc + educ + numgiven, data=gss))
View(gss)
summary(lm(rlife ~ aveeduc + aveeduc*educ + numgiven  + age + attend + as.factor(marital) + as.factor(race) + childs + sex , data=gss))
educs = c("educ1", "educ2", "educ3", "educ4", "educ5")
sub <- gss[, educs]
View(sub)
sub2=transform(sub, SD=apply(sub,1, sd, na.rm = TRUE))
View(sub2)
colnames(sub2)[6] <- "sdeduc"
gss <- data.frame(gss, sub2[,"sdeduc"])
colnames(gss)
colnames(gss)[2112] <- "sdeduc"
lm1 = lm(rlife ~ aveeduc + aveeduc + educ + numgiven  + sdeduc + age + attend + as.factor(marital) + as.factor(race) + childs + sex , data=gss)
summary(lm1)
