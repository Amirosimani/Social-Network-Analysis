library(data.table)
View(network)
clmns <- strsplit(as.character(network[1]),' ')
clmns <- strsplit(as.character(network[1]),"")
setDT(network1[, paste0("clmns", 1:16) := tstrsplit(clmns, ",")]
)
setDT(network[, paste0("clmns", 1:16) := tstrsplit(clmns, ",")])
View(network)
clmns <- strsplit(as.numeric(network[1]),"")
clmns <- strsplit(as.numeric(network[1]),'')
attributes <- read.csv("http://moreno.ss.uci.edu/krackht_att.dat", header=TRUE, sep=",", skip= 7)
View(attributes)
attributes <- read.csv("http://moreno.ss.uci.edu/krackht_att.dat", header=TRUE, sep=",", skip= 8)
View(attributes)
setwd("~/GitHub/Social Network Analysis")
library(data.table)
library(dplyr)
library(igraph)
### import data----
network <- read.csv("http://moreno.ss.uci.edu/krackht.dat", header=T, sep=";", skip= 7)
network = setDT(network)[, tstrsplit(DATA., ' ')]
network = network[,V1:=NULL]
#splitting the network data to advice/friendship/report
advice <- slice(network, 1:21)
friendship <- slice(network, 22:42)
report <- slice(network, 43:63)
#importing attributes data
attributes <- read.csv("Kracht_attributes.csv", header=TRUE, sep=";")
attributes$Node <- row.names(attributes)
attributes <- subset(attributes, select=c(Node,1:4))
friendship.matrix <- data.matrix(friendship, rownames.force = NA)
friendship_graph <- graph.adjacency(friendship.matrix, mode = "directed", weighted=NULL)
vertex_attr(friendship_graph) <- attributes
friendship_edges <- data.frame(get.edgelist(friendship_graph))
colnames(friendship_edges)  <- c('ID1', 'ID2')
View(friendship_edges)
friendship_edges_attributes <- merge(friendship_edges,
setNames(attributes, paste0(names(attributes) ,'1')),
by='ID1')
View(friendship_edges)
friendship_edges_attributes <- merge(friendship_edges,
setNames(attributes, paste0(names(attributes) ,'1')),
by.y='ID1')
# Attaching vertex attributes to the edge list to ID1 & ID2
friendship_edges_attributes <- merge(friendship_edges,
setNames(attributes, paste0(names(attributes) ,'1')),
by.x='ID1')
vertex_attr(friendship_graph, index= attributes$ID) <- attributes
View(attributes)
vertex_attr(friendship_graph, index= attributes$Node) <- attributes
#. Create an edgelist data.frame from the graph
friendship_edges <- data.frame(get.edgelist(friendship_graph))
colnames(friendship_edges)  <- c('ID1', 'ID2')
# Attaching vertex attributes to the edge list to ID1 & ID2
friendship_edges_attributes <- merge(friendship_edges,
setNames(attributes, paste0(names(attributes) ,'1')),
by.x='ID1')
friendship_graph
friendship_edges_attributes <- merge(friendship_edges, attributes, by="ID1")
?merge
attributes$ID1 <- row.names(attributes)
attributes <- subset(attributes, select=c(ID1,1:4))
friendship.matrix <- data.matrix(friendship, rownames.force = NA)
friendship_graph <- graph.adjacency(friendship.matrix, mode = "directed", weighted=NULL)
# Attach atributes to the matrix
vertex_attr(friendship_graph, index= attributes$Node) <- attributes
#. Create an edgelist data.frame from the graph
vertex_attr(friendship_graph, index= attributes$ID1) <- attributes
View(attributes)
vertex_attr(friendship_graph, index= attributes$ID1) <- attributes
network <- read.csv("http://moreno.ss.uci.edu/krackht.dat", header=T, sep=";", skip= 7)
network = setDT(network)[, tstrsplit(DATA., ' ')]
network = network[,V1:=NULL]
#splitting the network data to advice/friendship/report
advice <- slice(network, 1:21)
friendship <- slice(network, 22:42)
report <- slice(network, 43:63)
#importing attributes data
attributes <- read.csv("Kracht_attributes.csv", header=TRUE, sep=";")
attributes$ID1 <- row.names(attributes)
attributes <- subset(attributes, select=c(ID1,1:4))
### Graph----
#. Create igraph object from this matrix
friendship.matrix <- data.matrix(friendship, rownames.force = NA)
friendship_graph <- graph.adjacency(friendship.matrix, mode = "directed", weighted=NULL)
# Attach atributes to the matrix
vertex_attr(friendship_graph, index= attributes$ID1) <- attributes
network <- read.csv("http://moreno.ss.uci.edu/krackht.dat", header=T, sep=";", skip= 7)
network = setDT(network)[, tstrsplit(DATA., ' ')]
network = network[,V1:=NULL]
#splitting the network data to advice/friendship/report
advice <- slice(network, 1:21)
friendship <- slice(network, 22:42)
report <- slice(network, 43:63)
attributes <- read.csv("Kracht_attributes.csv", header=TRUE, sep=";")
attributes$ID1 <- row.names(attributes)
View(attributes)
attributes <- subset(attributes, select=c(ID1,1:4))
View(attributes)
friendship.matrix <- data.matrix(friendship, rownames.force = NA)
friendship_graph <- graph.adjacency(friendship.matrix, mode = "directed", weighted=NULL)
View(friendship.matrix)
vertex_attr(friendship_graph, index= attributes$ID1) <- attributes
View(friendship.matrix)
vertex_attr(friendship_graph) <- attributes
friendship_edges <- data.frame(get.edgelist(friendship_graph))
colnames(friendship_edges)  <- c('ID1', 'ID2')
friendship_edges_attributes <- merge(friendship_edges,
setNames(attributes, paste0(names(attributes) ,'1')),
by.x='ID1')
by='ID1')
friendship_edges_attributes <- merge(friendship_edges,
setNames(attributes, paste0(names(attributes) ,'1')),
by='ID1')
network <- read.csv("http://moreno.ss.uci.edu/krackht.dat", header=T, sep=";", skip= 7)
network = setDT(network)[, tstrsplit(DATA., ' ')]
network = network[,V1:=NULL]
#splitting the network data to advice/friendship/report
advice <- slice(network, 1:21)
friendship <- slice(network, 22:42)
report <- slice(network, 43:63)
#importing attributes data
attributes <- read.csv("Kracht_attributes.csv", header=TRUE, sep=";")
attributes$ID <- row.names(attributes)
attributes <- subset(attributes, select=c(ID,1:4))
friendship.matrix <- data.matrix(friendship, rownames.force = NA)
friendship_graph <- graph.adjacency(friendship.matrix, mode = "directed", weighted=NULL)
vertex_attr(friendship_graph) <- attributes
vertex_attr(friendship_graph) <- attributes
friendship_edges <- data.frame(get.edgelist(friendship_graph))
colnames(friendship_edges)  <- c('ID1', 'ID2')
View(friendship_edges)
friendship_edges_attributes <- merge(friendship_edges,
setNames(attributes, paste0(names(attributes) ,'1')),
by='ID1')
View(friendship_edges_attributes)
friendship_edges_attributes <- merge(friendship_edges_attributes,
setNames(attributes, paste0(names(attributes) ,'2')),
by='ID2')
View(friendship_edges_attributes)
View(friendship_edges_attributes)
rm(friendship_edges)
rm(friendship_edges_attributes)
friendship_edges <- data.frame(get.edgelist(friendship_graph))
colnames(friendship_edges)  <- c('ID1', 'ID2')
View(friendship_edges)
friendship_edges_attributes <- merge(friendship_edges,
setNames(attributes, paste0(names(attributes) ,'1')),
by='ID1')
View(friendship_edges_attributes)
friendship_edges_attributes <- merge(friendship_edges_attributes,
setNames(attributes, paste0(names(attributes) ,'2')),
by='ID2')
View(friendship_edges_attributes)
rm(friendship_edges_attributes)
friendship_edges_attributes <- merge(friendship_edges,
setNames(attributes, paste0(names(attributes) ,'1')),
by='ID1')
View(friendship_edges_attributes)
abc <- merge(friendship_edges_attributes,
setNames(attributes, paste0(names(attributes) ,'2')),
by='ID2')
View(abc)
View(friendship_edges_attributes)
abc <- merge(friendship_edges_attributes,
setNames(attributes, paste0(names(attributes) ,'2')),
by.x='ID2')
View(abc)
View(abc)
rm(abc)
abc <- merge(friendship_edges_attributes,
setNames(attributes, paste0(names(attributes) ,'2')),
by='ID2')
View(abc)
rm(abc)
abc <- merge(friendship_edges_attributes,
setNames(attributes, paste0(names(attributes) ,'2')),
by.x='ID2')
View(abc)
rm(abc)
abc <- merge(friendship_edges_attributes,
setNames(attributes, paste0(names(attributes) ,'2')),
by.y='ID2')
View(abc)
rm(abc)
abc <- merge(friendship_edge, attributes, by='ID2')
abc <- merge(friendship_edges, attributes, by='ID2')
abc <- merge(friendship_edges, attributes, by='ID1')
abc <- merge(friendship_edges, attributes, by.x='ID1')
abc <- merge(friendship_edges, attributes, by.y='ID1')
friendship_edges_attributes <- merge(friendship_edges,
setNames(attributes, paste0(names(attributes) ,'1')),
by='ID1')
View(friendship_edges_attributes)
abc <- merge(friendship_edges, setNames(attributes, paste0(names(attributes) ,'1')), by.y='ID2')
abc <- merge(friendship_edges, setNames(attributes, paste0(names(attributes) ,'1')), by='ID2')
abc <- merge(friendship_edges,
setNames(attributes, paste0(names(attributes) ,'1')),
by='ID1')
View(abc)
rm(abc)
setNames(attributes, paste0(names(attributes) ,'2')),
abc <- merge(friendship_edges,
setNames(attributes, paste0(names(attributes) ,'2')),
by='ID2')
View(abc)
rm(abc)
ab <- subset(friendship_edges, select=c(ID2,ID1))
View(ab)
abc <- merge(ab,
setNames(attributes, paste0(names(attributes) ,'2')),
by='ID2')
View(abc)
View(attributes)
rm(abc)
rm(ab)
abc <- merge(friendship_edges, attributes, by.x = 'ID2', by.y = 'ID')
View(abc)
rm(abc)
rm(friendship_edges_attributes)
friendship_edges_attributes <- merge(friendship_edges,
setNames(attributes, paste0(names(attributes) ,'1')),
by='ID2')
friendship_edges_attributes <- merge(friendship_edges,
setNames(attributes, paste0(names(attributes) ,'1')),
by='ID1')
View(friendship_edges_attributes)
ab <- friendship_edges_attributes[order(ID2),]
ab <- friendship_edges_attributes[order(ID1),]
str(friendship_edges_attributes)
friendship_edges_attributes$ID2
newdata <- friendship_edges_attributes[,order(ID2)]
newdata <- friendship_edges_attributes[,order('ID2')]
newdata <- friendship_edges_attributes[order('ID2'),]
View(newdata)
newdata <- friendship_edges_attributes[, order('ID2')]
newdata <- data.frame(newdata)
View(newdata)
View(newdata)
View(friendship_edges_attributes)
newdata <- friendship_edges_attributes[order('ID2'),]
View(newdata)
newdata <- arrange(friendship_edges_attributes, ID2)
View(network)
View(newdata)
friendship_edges_attributes <- merge(newdata,
setNames(attributes, paste0(names(attributes) ,'2')),
by='ID2')
View(friendship_edges_attributes)
friendship_edges_attributes <- merge(friendship_edges,
setNames(attributes, paste0(names(attributes) ,'1')),
by='ID1')
View(friendship_edges_attributes)
abc <- merge(newdata,
setNames(attributes, paste0(names(attributes) ,'2')),
by='ID2')
View(abc)
View(attributes)
network <- read.csv("http://moreno.ss.uci.edu/krackht.dat", header=T, sep=";", skip= 7)
network = setDT(network)[, tstrsplit(DATA., ' ')]
network = network[,V1:=NULL]
#splitting the network data to advice/friendship/report
advice <- slice(network, 1:21)
friendship <- slice(network, 22:42)
report <- slice(network, 43:63)
#importing attributes data
attributes <- read.csv("Kracht_attributes.csv", header=TRUE, sep=";")
attributes$ID <- row.names(attributes)
attributes <- subset(attributes, select=c(ID,1:4))
### Graph----
#. Create igraph object from this matrix
friendship.matrix <- data.matrix(friendship, rownames.force = NA)
friendship_graph <- graph.adjacency(friendship.matrix, mode = "directed", weighted=NULL)
# Attach atributes to the matrix
vertex_attr(friendship_graph) <- attributes
#. Create an edgelist data.frame from the graph
friendship_edges <- data.frame(get.edgelist(friendship_graph))
colnames(friendship_edges)  <- c('ID1', 'ID2')
# Attaching vertex attributes to the edge list to ID1 & ID2
friendship_edges_attributes <- merge(friendship_edges,
setNames(attributes, paste0(names(attributes) ,'1')),
by='ID1')
newdata <- arrange(friendship_edges_attributes, ID2)
View(friendship_edges_attributes)
View(newdata)
friendship_edges_attributes <- arrange(friendship_edges_attributes, ID2)
friendship_edges_attributes <- merge(friendship_edges_attributes,
setNames(attributes, paste0(names(attributes) ,'2')),
by='ID2')
View(friendship_edges_attributes)
friendship_edges_attributes <- arrange(friendship_edges_attributes, ID1)
View(friendship_edges_attributes)
friendship_edges_attributes22 <- subset(friendship_edges_attributes, select=c(ID1,1:10))
View(friendship_edges_attributes22)
friendship_edges_attributes <- subset(friendship_edges_attributes, select=c(ID1,1:10))
friendship_edges_attributes = friendship_edges_attributes[,ID1.1=NULL]
friendship_edges_attributes = friendship_edges_attributes[,ID1.1:=NULL]
View(friendship_edges_attributes22)
View(friendship_edges_attributes)
friendship_edges_attributes$ID1.1 <- NULL
View(friendship_edges_attributes)
View(friendship_edges_attributes22)
rm(friendship_edges_attributes22)
View(friendship)
View(friendship_edges_attributes)
mean(attributes$Age)
sd(attributes$Age)
View(friendship_edges_attributes)
View(friendship_edges_attributes)
View(friendship_edges)
View(friendship_edges_attributes)
friendship_edges_attributes$same_dept = ifelse(
friendship_edges_attributes$Dept11==friendship_edges_attributes$Dept2, 1,
0) # otherwise it's 0
View(friendship_edges_attributes)
friendship_edges_attributes$same_dept <- ifelse(
friendship_edges_attributes$Dept11==friendship_edges_attributes$Dept2, 1,
0) # otherwise it's 0
friendship_edges_attributes$Dept11==friendship_edges_attributes$Dept2
friendship_edges_attributes$same_dept = ifelse(
friendship_edges_attributes$Dept11==friendship_edges_attributes$Dept2, 1,
0) # otherwise it's 0
friendship_edges_attributes$Dept1==friendship_edges_attributes$Dept2
friendship_edges_attributes$same_dept = ifelse(
friendship_edges_attributes$Dept1==friendship_edges_attributes$Dept2, 1,
0) # otherwise it's 0
View(friendship_edges_attributes)
friendship_edges_attributes$same_level = ifelse(
friendship_edges_attributes$Level11==friendship_edges_attributes$Level22, 1,
0) # otherwise it's 0
friendship_edges_attributes$same_level = ifelse(
friendship_edges_attributes$Level1==friendship_edges_attributes$Level2, 1,
0) # otherwise it's 0
View(friendship_edges_attributes)
mean(friendship_edges_attributes$Age1)
mean(friendship_edges_attributes$Age2)
mean(attributes$Age)
sd(attributes$Age)
plot(attributes$Age)
barplot(attributes$Age)
barplot(attributes$Age, count(attributes$Age))
friendship_edges_attributes$same_age = ifelse(
(friendship_edges_attributes$Age1 < friendship_edges_attributes$Age2 + 5) | (friendship_edges_attributes$Age1 > friendship_edges_attributes$Age2 - 5),
1,
0) # otherwise it's 0
View(friendship_edges_attributes)
friendship_edges_attributes$same_age = ifelse(
(friendship_edges_attributes$Age1 < friendship_edges_attributes$Age2 + 5) & (friendship_edges_attributes$Age1 > friendship_edges_attributes$Age2 - 5),
1,
0) # otherwise it's 0
View(friendship_edges_attributes)
View(friendship_edges_attributes)
ego_homophily_stats <- aggregate(friendship_edges_attributes[,c('same_dept', 'same_level','samie_age', 'Dept1')], by=list(ID1=friendship_edges_attributes$ID1), FUN=mean, na.rm=TRUE)
ego_homophily_stats <- aggregate(friendship_edges_attributes[,c('same_dept', 'same_level','same_age', 'Dept1')], by=list(ID1=friendship_edges_attributes$ID1), FUN=mean, na.rm=TRUE)
View(ego_homophily_stats)
ego_homophily_stats <- aggregate(friendship_edges_attributes[,c('same_dept', 'same_level','same_age')], by=list(ID1=friendship_edges_attributes$ID1), FUN=mean, na.rm=TRUE)
View(ego_homophily_stats)
View(ego_homophily_stats)
View(attributes)
attributes <- merge(attributes,ego_homophily_stats,  by.x="ID", by.y="ID1")
View(attributes)
summary(lm(same_dept ~ Dept, attributes))
summary(lm(same_dept ~ Level, attributes))
summary(lm(same_level ~ Level, attributes))
summary(lm(same_age ~ Age, attributes))
attributes <- merge(attributes, data.frame(ID=V(friendship_graph)$ID,
degree= degree(friendship_graph)),
by='ID')
View(attributes)
summary(lm(same_dept ~ Dept+degree, attributes))
summary(lm(same_level ~ Level+degree, attributes))
attributes <- merge(attributes, data.frame(ID=V(friendship_graph)$name, transitivity=transitivity(friendship_graph, type="local") ) , by='ID')
attributes <- merge(attributes, data.frame(ID=V(friendship_graph)$ID, transitivity=transitivity(friendship_graph, type="local") ) , by='ID')
View(attributes)
dyad.census(attributes)
dyad.census(friendship_graph)
abc <- read.csv("http://moreno.ss.uci.edu/ffe.dat", header=T, sep=";", skip= 7)
View(abc)
abc <- read.csv("http://moreno.ss.uci.edu/ffe.dat", header=T, sep=";", skip= 30)
View(abc)
abc <- read.csv("http://moreno.ss.uci.edu/ffe.dat", header=T, sep=";", skip= 36)
View(abc)
abc <- read.csv("http://moreno.ss.uci.edu/ffe.dat", header=T, sep=";", skip= 35)
View(abc)
abc <- read.csv("http://moreno.ss.uci.edu/ffe.dat", header=T, sep=";", skip= 36)
View(abc)
abc = setDT(abc)[, tstrsplit(DATA., ' ')]
View(abc)
rm(abc)
library(data.table)
library(dplyr)
library(igraph)
### 1.import data----
network <- read.csv("http://moreno.ss.uci.edu/krackht.dat", header=T, sep=";", skip= 7)
network = setDT(network)[, tstrsplit(DATA., ' ')]
network = network[,V1:=NULL]
#splitting the network data to advice/friendship/report
advice <- slice(network, 1:21)
friendship <- slice(network, 22:42)
report <- slice(network, 43:63)
network <- read.csv("http://moreno.ss.uci.edu/krackht.dat", header=T, sep=";", skip= 7)
network = setDT(network)[, tstrsplit(DATA., ' ')]
network = network[,V1:=NULL]
#splitting the network data to advice/friendship/report
advice <- slice(network, 1:21)
friendship <- slice(network, 22:42)
report <- slice(network, 43:63)
#importing attributes data
attributes <- read.csv("Kracht_attributes.csv", header=TRUE, sep=";")
attributes$ID <- row.names(attributes)
attributes <- subset(attributes, select=c(ID,1:4))
View(attributes)
friendship.matrix <- data.matrix(friendship, rownames.force = NA)
friendship_graph <- graph.adjacency(friendship.matrix, mode = "directed", weighted=NULL)
rm(advice)
rm(report)
vertex_attr(friendship_graph) <- attributes
#. Create an edgelist data.frame from the graph
friendship_edges <- data.frame(get.edgelist(friendship_graph))
colnames(friendship_edges)  <- c('ID1', 'ID2')
View(friendship_edges)
friendship_edges_attributes <- merge(friendship_edges,
setNames(attributes, paste0(names(attributes) ,'1')),
by='ID1')
View(friendship_edges_attributes)
friendship_edges_attributes <- arrange(friendship_edges_attributes, ID2)
View(friendship_edges_attributes)
friendship_edges_attributes <- merge(friendship_edges_attributes,
setNames(attributes, paste0(names(attributes) ,'2')),
by='ID2')
View(friendship_edges_attributes)
#sorting back
friendship_edges_attributes <- arrange(friendship_edges_attributes, ID1)
friendship_edges_attributes <- subset(friendship_edges_attributes, select=c(ID1,1:10))
friendship_edges_attributes$ID1.1 <- NULL
View(friendship_edges_attributes)
View(friendship_edges_attributes)
friendship_edges_attributes$same_dept = ifelse(
friendship_edges_attributes$Dept1==friendship_edges_attributes$Dept2, 1,
0) # otherwise it's 0
View(friendship_edges_attributes)
#  Add columns  which inidcate if they have the same level
friendship_edges_attributes$same_level = ifelse(
friendship_edges_attributes$Level1==friendship_edges_attributes$Level2, 1,
0) # otherwise it's 0
#  Add columns  which inidcate if they are in the same age group (based on age SD)
friendship_edges_attributes$same_age = ifelse(
(friendship_edges_attributes$Age1 < friendship_edges_attributes$Age2 + 5) & (friendship_edges_attributes$Age1 > friendship_edges_attributes$Age2 - 5),
1,
0) # otherwise it's 0
View(friendship_edges_attributes)
# Get the proportion of each ego's connections who have the same department, level, and age
ego_homophily_stats <- aggregate(friendship_edges_attributes[,c('same_dept', 'same_level','same_age')], by=list(ID1=friendship_edges_attributes$ID1), FUN=mean, na.rm=TRUE)
View(ego_homophily_stats)
attributes <- merge(attributes,ego_homophily_stats,  by.x="ID", by.y="ID1")
View(attributes)
attributes <- read.csv("Kracht_attributes.csv", header=TRUE, sep=";")
attributes$ID <- row.names(attributes)
attributes <- subset(attributes, select=c(ID,1:4))
View(attributes)
att <- merge(attributes,ego_homophily_stats,  by.x="ID", by.y="ID1")
View(att)
att <- arrange(att, ID)
View(att)
str(att¢|ID)
str(att$ID)
att$ID <- as.numeric(att$ID)
att <- arrange(att, ID)
View(att)
View(friendship_edges_attributes)
friendship_edges <- data.frame(get.edgelist(friendship_graph))
colnames(friendship_edges)  <- c('ID1', 'ID2')
friendship_edges <- data.frame(get.edgelist(friendship_graph))
colnames(friendship_edges)  <- c('ID1', 'ID2')
# Attaching vertex attributes to the edge list to ID1 & ID2
View(attributes)
View(ego_homophily_stats)
View(friendship_edges_attributes)
ego_homophily_stats <- aggregate(friendship_edges_attributes[,c('same_dept', 'same_level','same_age')], by=list(ID1=friendship_edges_attributes$ID1), FUN=mean, na.rm=TRUE)
View(ego_homophily_stats)
str(attributes$ID)
str(ego_homophily_stats$ID1)
attributes$ID <- as.numeric(attributes$ID)
att <- merge(attributes, ego_homophily_stats, by.x="ID", by.y="ID1")
View(att)
att <- merge(attributes, ego_homophily_stats, by.x="ID", by.y="ID1", all =TRUE)
View(att)
attributes <- merge(attributes, ego_homophily_stats, by.x="ID", by.y="ID1", all =TRUE)
summary(lm(same_dept ~ Dept, attributes))
View(attributes)
att <- merge(attributes, data.frame(ID=V(friendship_graph)$ID,
degree= degree(friendship_graph)),
by='ID')
View(att)
att <- merge(attributes, data.frame(ID=V(friendship_graph)$ID,
degree= degree(friendship_graph)),
by='ID', all =TRUE)
View(att)
attributes <- merge(attributes, data.frame(ID=V(friendship_graph)$ID,
degree= degree(friendship_graph)),
by='ID', all =TRUE)
View(attributes)
summary(lm(same_dept ~ Dept+degree, attributes))
summary(lm(same_level ~ Level+degree, attributes))
summary(lm(same_age ~ Age+degree, attributes))
attributes <- merge(attributes, data.frame(ID=V(friendship_graph)$ID,
transitivity=transitivity(friendship_graph, type="local") ) ,
by='ID', all = TRUE)
View(attributes)
dyad.census(friendship_graph)
summary(lm(same_age ~ Age + degree + transitivity, attributes))
dyad.census(friendship_graph)
